# -*- coding: utf-8 -*-
"""Using Decorators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rZUovwJ1gT5S0WadJpEZSrhYvGS1e9fq
"""

# Decorators are finctions that act upon another function to modify the behaviour(output) of theat function

def greet():
  print('Hello guys')

greet()

def first_decorator(f):
  #print("Sweet Jesus!")
  def inner_func(): #inner_func is a wrapper function
    print('Finish Line')
    f()
    print("I am great")
  return inner_func

x = first_decorator(greet)
x()

greet()

import time
import math

#Let's a create a decorator that would find the time of execution of any function

def calc_time(f):
  def wrapper_func(*args, **kwags):
    start_time = time.time()
    f(*args, **kwags)
    end_time = time.time()
    print(f"Total execution time for {f.__name__} : {end_time - start_time} ")
  return wrapper_func

@calc_time
def fact_1(n):
  if n in [0,1]:
    return 1
  else:
    return n * fact_1(n-1)

fact_1(50)

b = calc_time(fact_1(5))
b(5)

@calc_time
def fact_2(n):
  print(math.factorial(n))

fact_2(5)

fact_2(50)

def fact_2(n):
  print(math.factorial(n))

fact_2()

def greet_dec(f):
  def wrapper_func2(*args, **kwags):
    print('Good Morning, Greeting before execution')
    res = f(*args, **kwags)
    print('Good Evening,Greeting after execution')
    return res
  return wrapper_func2

@greet_dec
def sum_3nos(x, y, z):
  print('Inside house....')
  return x + y + z

x,y,z = 3, 7, 9

sum_3nos(x,y,z)

#Working With Nested Decorators

def italics(f):
  def wrapper_func():
    return "<i>" + f() + "</i>"
  return wrapper_func

def strong(f):
  def wrapper_func():
    return "<strong>" + f() + "</strong>"
  return wrapper_func

# NOTE: The python interpreter does not read nested decorators from top to botoom but reads them from bottom to top
@italics
@strong
def abc():
  return "defg"

abc()

def sqr_dec(f):
  def wrapper_func():
    res = f()
    return res * res
  return wrapper_func

def double_dec(f):
  def wrapper_func():
    res = f()
    return res * 2
  return wrapper_func

@sqr_dec
@double_dec
def first_no():
  return 5

@sqr_dec
@double_dec
def second_no():
  return 28

@sqr_dec
@double_dec
def third_no():
  return 3

first_no()

second_no()

third_no()

#Built-in decorators in python

'''
1. @staticmethod
2. @abstractmethod
3. @classmethod
4. @typing
5. @property
6. @unique
'''

#Using the @abstractmethod decorator
from abc import ABC.abstractmethod
class